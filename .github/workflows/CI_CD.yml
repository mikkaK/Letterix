name: Docker_api_gateway

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  REGISTRY: registry.alasfood.ch

jobs:
  builMicroservices:
    name: Docker build and push microservices
    runs-on: ubuntu-latest
    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
    - name: checkout repo
      uses: actions/checkout@v3
    
    - name: Build the API_gateway image
      working-directory: ./Letterix_API/api-gateway
      run: docker build . --file Dockerfile --tag ${{ env.REGISTRY }}/letterix_api_gateway:latest
    
    - name: Build the config_server image
      working-directory: ./Letterix_API/config-server
      run: docker build . --file Dockerfile --tag ${{ env.REGISTRY }}/letterix_config_server:latest
      
    - name: Build the cover-letter-service image
      working-directory: ./Letterix_API/cover-letter-service
      run: docker build . --file Dockerfile --tag ${{ env.REGISTRY }}/letterix_cover-letter_service:latest
      
    - name: Build the service_registry image
      working-directory: ./Letterix_API/service-registry
      run: docker build . --file Dockerfile --tag ${{ env.REGISTRY }}/letterix_service_registry:latest
      
    - name: Push api_gateway
      if: github.event_name != 'pull_request'
      run: docker push ${{ env.REGISTRY }}/letterix_api_gateway:latest
      
    - name: Push config_server
      if: github.event_name != 'pull_request'
      run: docker push ${{ env.REGISTRY }}/letterix_config_server:latest
    
    - name: Push cover-letter-service
      if: github.event_name != 'pull_request'
      run: docker push ${{ env.REGISTRY }}/letterix_cover-letter_service:latest
    
    - name: Push service_registry
      if: github.event_name != 'pull_request'
      run: docker push ${{ env.REGISTRY }}/letterix_service_registry:latest
  
  buildFrontend:
    name: Docker build frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install dependencies
        run: yarn install

      - name: Build the application
        run: yarn build .

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build/
          
      - name: Build the frontend image
        working-directory: ./frontend
        run: docker build . --file Dockerfile --tag ${{ env.REGISTRY }}/letterix_frontend:latest 
        
      - name: Push frontend
        if: github.event_name != 'pull_request'
        run: docker push ${{ env.REGISTRY }}/letterix_frontend:latest
      
  deploy:
    name: deploy to server
    runs-on: ubuntu-latest
    needs: {builMicroservices, buildFrontend}
    steps:
    - name: deploy on server
      uses: appleboy/ssh-action@master
      with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 6069
          script: pwd
