plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'ch.letterix'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    implementation group: 'commons-validator', name: 'commons-validator', version: 'latest.release'

    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: 'latest.release'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: 'latest.release'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:latest.release'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: 'latest.release'
    implementation group: 'org.mapstruct', name: 'mapstruct', version: 'latest.release'
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: 'latest.release'
    compileOnly("org.springframework.boot:spring-boot-devtools")

    //Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:latest.release'

    // Testing
    testImplementation "com.h2database:h2:latest.release"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

task build_and_push {
    group 'application'
    description 'Pushes the built image to the docker registry'
    doLast {
        exec {
            ignoreExitValue true
            executable "docker"
            args "build", "-t", "mikkak/letterix_cover_letter_api:latest", "."
        }
        exec {
            ignoreExitValue true
            executable "docker"
            args "push", "mikkak/letterix_cover_letter_api:latest"
        }
    }
}
tasks.withType(Test) {
    doFirst {
        environment("PROFILE", "test")
    }
}

def readEnvironmentFileIfExists(String envFilename) {
    def envVars = [:]
    def envFile = file(envFilename)
    if (envFile.exists()) {
        envFile.readLines().each {
            if (it != "" && it.charAt(0) != (char) '#') {
                def (key, value) = it.tokenize("=")
                key = key.toString()
                value = value.toString()
                if (System.getenv(key) == null) {
                    envVars[key] = value
                }
            }
        }
    }

    return envVars
}

tasks.withType(JavaExec) { javaExec ->
    doFirst {
        def envVars = readEnvironmentFileIfExists(".env")
        for (envVar in envVars) {
            environment(envVar.key, envVar.value)
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
